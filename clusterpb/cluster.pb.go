// Code generated by protoc-gen-go.
// source: cluster.proto
// DO NOT EDIT!

/*
Package serverpb is a generated protocol buffer package.

It is generated from these files:
	cluster.proto

It has these top-level messages:
	ChatMsg
	DataChgSummary
	Node
	NodeChgRequest
	NodeChgResponse
	NodeQryRequest
	NodeQryResponse
	PingRequest
	PingResponse
*/
package serverpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeChgRequest_Operations int32

const (
	NodeChgRequest_UNKNOWN NodeChgRequest_Operations = 0
	// A new node request to join the cluster
	NodeChgRequest_JOIN NodeChgRequest_Operations = 1
	// A node request to quit the cluster
	NodeChgRequest_QUIT NodeChgRequest_Operations = 2
	// request to add a node to the server list as a new node just joined
	NodeChgRequest_ADD NodeChgRequest_Operations = 3
	// Request to drop a node from the server list as a node is about to quit
	NodeChgRequest_DROP NodeChgRequest_Operations = 4
)

var NodeChgRequest_Operations_name = map[int32]string{
	0: "UNKNOWN",
	1: "JOIN",
	2: "QUIT",
	3: "ADD",
	4: "DROP",
}
var NodeChgRequest_Operations_value = map[string]int32{
	"UNKNOWN": 0,
	"JOIN":    1,
	"QUIT":    2,
	"ADD":     3,
	"DROP":    4,
}

func (x NodeChgRequest_Operations) String() string {
	return proto.EnumName(NodeChgRequest_Operations_name, int32(x))
}
func (NodeChgRequest_Operations) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type ChatMsg struct {
	Userid  int32  `protobuf:"varint,1,opt,name=userid" json:"userid,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ChatMsg) Reset()                    { *m = ChatMsg{} }
func (m *ChatMsg) String() string            { return proto.CompactTextString(m) }
func (*ChatMsg) ProtoMessage()               {}
func (*ChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DataChgSummary struct {
	// The number of record received.
	RecordCount int64 `protobuf:"varint,1,opt,name=record_count,json=recordCount" json:"record_count,omitempty"`
	// The duration of the traversal in seconds.
	ElapsedTime uint64 `protobuf:"varint,2,opt,name=elapsed_time,json=elapsedTime" json:"elapsed_time,omitempty"`
}

func (m *DataChgSummary) Reset()                    { *m = DataChgSummary{} }
func (m *DataChgSummary) String() string            { return proto.CompactTextString(m) }
func (*DataChgSummary) ProtoMessage()               {}
func (*DataChgSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Node struct {
	Hostname    string `protobuf:"bytes,1,opt,name=Hostname,json=hostname" json:"Hostname,omitempty"`
	RPCPort     int32  `protobuf:"varint,2,opt,name=RPCPort,json=rPCPort" json:"RPCPort,omitempty"`
	ConsolePort int32  `protobuf:"varint,3,opt,name=ConsolePort,json=consolePort" json:"ConsolePort,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type NodeChgRequest struct {
	Operation NodeChgRequest_Operations `protobuf:"varint,1,opt,name=operation,enum=serverpb.NodeChgRequest_Operations" json:"operation,omitempty"`
	Node      *Node                     `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
}

func (m *NodeChgRequest) Reset()                    { *m = NodeChgRequest{} }
func (m *NodeChgRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeChgRequest) ProtoMessage()               {}
func (*NodeChgRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NodeChgRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type NodeChgResponse struct {
	// success if empty string returned
	ErrMsg string `protobuf:"bytes,1,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
}

func (m *NodeChgResponse) Reset()                    { *m = NodeChgResponse{} }
func (m *NodeChgResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeChgResponse) ProtoMessage()               {}
func (*NodeChgResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type NodeQryRequest struct {
	ScrNode *Node `protobuf:"bytes,1,opt,name=scr_node,json=scrNode" json:"scr_node,omitempty"`
}

func (m *NodeQryRequest) Reset()                    { *m = NodeQryRequest{} }
func (m *NodeQryRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeQryRequest) ProtoMessage()               {}
func (*NodeQryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NodeQryRequest) GetScrNode() *Node {
	if m != nil {
		return m.ScrNode
	}
	return nil
}

type NodeQryResponse struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=Nodes,json=nodes" json:"Nodes,omitempty"`
}

func (m *NodeQryResponse) Reset()                    { *m = NodeQryResponse{} }
func (m *NodeQryResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeQryResponse) ProtoMessage()               {}
func (*NodeQryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NodeQryResponse) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// A PingRequest specifies the string to echo in response.
// Fields are exported so that they will be serialized in the rpc call.
type PingRequest struct {
	// Echo this string with PingResponse.
	Ping string `protobuf:"bytes,1,opt,name=ping" json:"ping,omitempty"`
	// The address of the client.
	Addr string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// A PingResponse contains the echoed ping request string.
type PingResponse struct {
	// An echo of value sent with PingRequest.
	Pong string `protobuf:"bytes,1,opt,name=pong" json:"pong,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*ChatMsg)(nil), "serverpb.ChatMsg")
	proto.RegisterType((*DataChgSummary)(nil), "serverpb.DataChgSummary")
	proto.RegisterType((*Node)(nil), "serverpb.Node")
	proto.RegisterType((*NodeChgRequest)(nil), "serverpb.NodeChgRequest")
	proto.RegisterType((*NodeChgResponse)(nil), "serverpb.NodeChgResponse")
	proto.RegisterType((*NodeQryRequest)(nil), "serverpb.NodeQryRequest")
	proto.RegisterType((*NodeQryResponse)(nil), "serverpb.NodeQryResponse")
	proto.RegisterType((*PingRequest)(nil), "serverpb.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "serverpb.PingResponse")
	proto.RegisterEnum("serverpb.NodeChgRequest_Operations", NodeChgRequest_Operations_name, NodeChgRequest_Operations_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for SyncUp service

type SyncUpClient interface {
	// DataChange() send data change requests to peers
	DataChange(ctx context.Context, opts ...grpc.CallOption) (SyncUp_DataChangeClient, error)
	// NodeChange send Join or Quit request to other peers
	NodeChange(ctx context.Context, in *NodeChgRequest, opts ...grpc.CallOption) (*NodeChgResponse, error)
	// NodeQuery ask for a list of all nodes
	NodeQuery(ctx context.Context, in *NodeQryRequest, opts ...grpc.CallOption) (*NodeQryResponse, error)
	// Ping peers
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type syncUpClient struct {
	cc *grpc.ClientConn
}

func NewSyncUpClient(cc *grpc.ClientConn) SyncUpClient {
	return &syncUpClient{cc}
}

func (c *syncUpClient) DataChange(ctx context.Context, opts ...grpc.CallOption) (SyncUp_DataChangeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SyncUp_serviceDesc.Streams[0], c.cc, "/serverpb.SyncUp/DataChange", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncUpDataChangeClient{stream}
	return x, nil
}

type SyncUp_DataChangeClient interface {
	Send(*ChatMsg) error
	CloseAndRecv() (*DataChgSummary, error)
	grpc.ClientStream
}

type syncUpDataChangeClient struct {
	grpc.ClientStream
}

func (x *syncUpDataChangeClient) Send(m *ChatMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *syncUpDataChangeClient) CloseAndRecv() (*DataChgSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DataChgSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *syncUpClient) NodeChange(ctx context.Context, in *NodeChgRequest, opts ...grpc.CallOption) (*NodeChgResponse, error) {
	out := new(NodeChgResponse)
	err := grpc.Invoke(ctx, "/serverpb.SyncUp/NodeChange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncUpClient) NodeQuery(ctx context.Context, in *NodeQryRequest, opts ...grpc.CallOption) (*NodeQryResponse, error) {
	out := new(NodeQryResponse)
	err := grpc.Invoke(ctx, "/serverpb.SyncUp/NodeQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncUpClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/serverpb.SyncUp/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SyncUp service

type SyncUpServer interface {
	// DataChange() send data change requests to peers
	DataChange(SyncUp_DataChangeServer) error
	// NodeChange send Join or Quit request to other peers
	NodeChange(context.Context, *NodeChgRequest) (*NodeChgResponse, error)
	// NodeQuery ask for a list of all nodes
	NodeQuery(context.Context, *NodeQryRequest) (*NodeQryResponse, error)
	// Ping peers
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterSyncUpServer(s *grpc.Server, srv SyncUpServer) {
	s.RegisterService(&_SyncUp_serviceDesc, srv)
}

func _SyncUp_DataChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncUpServer).DataChange(&syncUpDataChangeServer{stream})
}

type SyncUp_DataChangeServer interface {
	SendAndClose(*DataChgSummary) error
	Recv() (*ChatMsg, error)
	grpc.ServerStream
}

type syncUpDataChangeServer struct {
	grpc.ServerStream
}

func (x *syncUpDataChangeServer) SendAndClose(m *DataChgSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *syncUpDataChangeServer) Recv() (*ChatMsg, error) {
	m := new(ChatMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SyncUp_NodeChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeChgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncUpServer).NodeChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.SyncUp/NodeChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncUpServer).NodeChange(ctx, req.(*NodeChgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncUp_NodeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncUpServer).NodeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.SyncUp/NodeQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncUpServer).NodeQuery(ctx, req.(*NodeQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncUp_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncUpServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.SyncUp/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncUpServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SyncUp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.SyncUp",
	HandlerType: (*SyncUpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeChange",
			Handler:    _SyncUp_NodeChange_Handler,
		},
		{
			MethodName: "NodeQuery",
			Handler:    _SyncUp_NodeQuery_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SyncUp_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DataChange",
			Handler:       _SyncUp_DataChange_Handler,
			ClientStreams: true,
		},
	},
}

func init() { proto.RegisterFile("cluster.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0x41, 0x8f, 0xd2, 0x40,
	0x14, 0xde, 0x42, 0xa1, 0xf0, 0xba, 0x22, 0x4e, 0xe2, 0x8a, 0x9c, 0xd6, 0xd1, 0xc3, 0xea, 0x81,
	0x03, 0xc6, 0xec, 0xc1, 0x98, 0xb8, 0x5b, 0x0e, 0xae, 0x46, 0x60, 0x67, 0x17, 0x4d, 0x3c, 0x48,
	0x66, 0xdb, 0x09, 0x90, 0xd0, 0x4e, 0x9d, 0x99, 0x9a, 0xf0, 0x13, 0xfc, 0x49, 0xfe, 0x3b, 0x67,
	0xa6, 0x2d, 0x05, 0x82, 0xb7, 0xf7, 0xbe, 0xf7, 0xbe, 0xf7, 0xbe, 0x7e, 0xf3, 0x0a, 0x8f, 0xc2,
	0x75, 0x26, 0x15, 0x13, 0x83, 0x54, 0x70, 0xc5, 0x51, 0x4b, 0x32, 0xf1, 0x9b, 0x89, 0xf4, 0x01,
	0xbf, 0x07, 0x2f, 0x58, 0x52, 0xf5, 0x55, 0x2e, 0xd0, 0x19, 0x34, 0x33, 0x8d, 0xaf, 0xa2, 0x9e,
	0x73, 0xee, 0x5c, 0x34, 0x48, 0x91, 0xa1, 0x1e, 0x78, 0x31, 0x93, 0x92, 0x2e, 0x58, 0xaf, 0xa6,
	0x0b, 0x6d, 0x52, 0xa6, 0xf8, 0x1b, 0x74, 0x46, 0x54, 0xd1, 0x60, 0xb9, 0xb8, 0xcb, 0xe2, 0x98,
	0x8a, 0x0d, 0x7a, 0x01, 0xa7, 0x82, 0x85, 0x5c, 0x44, 0xf3, 0x90, 0x67, 0x89, 0xb2, 0x93, 0xea,
	0xc4, 0xcf, 0xb1, 0xc0, 0x40, 0xa6, 0x85, 0xad, 0x69, 0x2a, 0x59, 0x34, 0x57, 0xab, 0x38, 0x9f,
	0xe9, 0x12, 0xbf, 0xc0, 0xee, 0x35, 0x84, 0x7f, 0x82, 0x3b, 0xe6, 0x11, 0x43, 0x7d, 0x68, 0x7d,
	0xe2, 0x52, 0x25, 0x54, 0xb7, 0x39, 0x76, 0x75, 0x6b, 0x59, 0xe4, 0x46, 0x15, 0x99, 0x06, 0x53,
	0x2e, 0x94, 0x9d, 0xd0, 0x20, 0x9e, 0xc8, 0x53, 0x74, 0x0e, 0x7e, 0xc0, 0x13, 0xc9, 0xd7, 0xcc,
	0x56, 0xeb, 0xb6, 0xea, 0x87, 0x15, 0x84, 0xff, 0x3a, 0xd0, 0x31, 0x0b, 0xb4, 0x70, 0xc2, 0x7e,
	0x65, 0x4c, 0x2a, 0x74, 0x05, 0x6d, 0x9e, 0x32, 0x41, 0xd5, 0x8a, 0x27, 0x76, 0x57, 0x67, 0xf8,
	0x72, 0x50, 0xba, 0x34, 0xd8, 0x6f, 0x1e, 0x4c, 0xca, 0x4e, 0x49, 0x2a, 0x16, 0xc2, 0xe0, 0x26,
	0xba, 0xcf, 0xca, 0xf1, 0x87, 0x9d, 0x7d, 0x36, 0xb1, 0x35, 0xfc, 0x11, 0xa0, 0x22, 0x23, 0x1f,
	0xbc, 0xd9, 0xf8, 0xcb, 0x78, 0xf2, 0x7d, 0xdc, 0x3d, 0x41, 0x2d, 0x70, 0x3f, 0x4f, 0x6e, 0xc6,
	0x5d, 0xc7, 0x44, 0xb7, 0xb3, 0x9b, 0xfb, 0x6e, 0x0d, 0x79, 0x50, 0xbf, 0x1a, 0x8d, 0xba, 0x75,
	0x03, 0x8d, 0xc8, 0x64, 0xda, 0x75, 0xf1, 0x1b, 0x78, 0xbc, 0x55, 0x23, 0x53, 0x3d, 0x85, 0xa1,
	0x67, 0xe0, 0x31, 0x21, 0xe6, 0xb1, 0x5c, 0x14, 0x2e, 0x35, 0x75, 0xaa, 0x5f, 0x54, 0x3f, 0xae,
	0xfd, 0xcc, 0x5b, 0xb1, 0x29, 0x3f, 0xf3, 0x35, 0xb4, 0x64, 0x28, 0xe6, 0x56, 0xa7, 0x73, 0x54,
	0xa7, 0xa7, 0xeb, 0x26, 0xc0, 0x97, 0xf9, 0x22, 0x4b, 0x2e, 0x16, 0xbd, 0x82, 0x86, 0x81, 0xa4,
	0xa6, 0xd6, 0x8f, 0x50, 0x1b, 0x66, 0xac, 0xc4, 0xef, 0xc0, 0x9f, 0xae, 0x92, 0xad, 0xb3, 0x08,
	0xdc, 0x54, 0xa7, 0x85, 0x34, 0x1b, 0x1b, 0x8c, 0x46, 0x91, 0x28, 0xee, 0xc9, 0xc6, 0x18, 0xc3,
	0x69, 0x4e, 0x2b, 0x96, 0x19, 0x1e, 0xdf, 0xe1, 0xe9, 0x78, 0xf8, 0xa7, 0x06, 0xcd, 0xbb, 0x4d,
	0x12, 0xce, 0x52, 0xf4, 0x01, 0x20, 0xbf, 0x3d, 0x9a, 0x2c, 0x18, 0x7a, 0x52, 0x49, 0x29, 0xce,
	0xb9, 0xdf, 0xab, 0xa0, 0xfd, 0x23, 0xc5, 0x27, 0x17, 0x0e, 0x0a, 0x00, 0x72, 0x1b, 0x2d, 0xbd,
	0xf7, 0xbf, 0xa7, 0xee, 0x3f, 0x3f, 0x52, 0xc9, 0x05, 0xe2, 0x13, 0x74, 0x0d, 0x6d, 0x6b, 0x51,
	0xc6, 0xf4, 0xe9, 0x1f, 0xcc, 0xa8, 0x4c, 0x3f, 0x9c, 0xb1, 0xe3, 0xa8, 0x9e, 0x71, 0x09, 0xae,
	0xf9, 0x6c, 0xf4, 0xb4, 0x6a, 0xda, 0x71, 0xaf, 0x7f, 0x76, 0x08, 0x97, 0xc4, 0x6b, 0xf8, 0xb1,
	0xfd, 0x8b, 0x1f, 0x9a, 0xf6, 0xb7, 0x7e, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x98, 0xd7, 0x03,
	0x4f, 0xe7, 0x03, 0x00, 0x00,
}
